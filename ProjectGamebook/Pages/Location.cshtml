@page
@model ProjectGamebook.Pages.LocationModel
@Html.AntiForgeryToken()
@{
}
<div class="location">
    <div class="location__main" style="background-image: url(@Url.Content(@Model.Location.ImageUrl)); background-size: 125%; background-position: center center; background-repeat: no-repeat">
        <div style="width: 320px; height: 320px; display: block; position: absolute; top: 20px; left: 20px; text-align: center; color: white;" id="div">
            @Html.Raw(Model.Location.Content)
            <script>
                @if (Model.Location.Content == null) {
                    <text>
                        document.getElementById("div").style.display = "none";
                    </text>
                }
            </script>
            <div id="buttons" class="button-container">
                <button id="kill">Hit</button>
                <button id="critical">Attempt critical</button>
            </div>
            <div class="fight-indicators-container">
                <p id="hit-indicator" class="hit-indicator">Hit</p>
                <p id="block-indicator" class="block-indicator">You blocked</p>
                <p id="fail-indicator" class="fail-indicator">Fail</p>
                <p id="crit-indicator" class="crit-indicator">Critical hit</p>
            </div>
        </div>
    </div>
    <div class="inventory">
        <div class="inventory-icon" onclick="toggleInv()">
        </div>
        <ul class="inventory__main">
            <li id="inv-slot-1" class="inventory__item">@if (Model.GS.Inventory.slots.Count > 0) {<img src="@Model.GS.Inventory.slots[0].ImageUrl" />}</li>
            <li id="inv-slot-2" class="inventory__item">@if (Model.GS.Inventory.slots.Count > 1) {<img src="@Model.GS.Inventory.slots[1].ImageUrl" />}</li>
            <li id="inv-slot-3" class="inventory__item">@if (Model.GS.Inventory.slots.Count > 2) {<img src="@Model.GS.Inventory.slots[2].ImageUrl" />}</li>
            <li id="inv-slot-4" class="inventory__item">@if (Model.GS.Inventory.slots.Count > 3) {<img src="@Model.GS.Inventory.slots[3].ImageUrl" />}</li>
        </ul>

    </div>
    <div>
        <h2>Player stats</h2>
        <p id="hp">HP: @Model.GS.HP</p>
    </div>
    <p id="locationText"></p>
    <button class="btn btnNext" id="btnNext">Next</button>
    <script>
        let btnNextStyle;
        let currentIndex = 0;
        var stringList = @Html.Raw(@Model.jsonString);
        function checkConnection(targetId, canBeEntered) {
            let divStyle = window.getComputedStyle(document.getElementById("div")).getPropertyValue("display");

            console.log(divStyle);
            console.log(btnNextStyle);

            let connectionElement = document.getElementById("connection_" + targetId);

            if (connectionElement) {
                connectionElement.style.display = (canBeEntered && btnNextStyle === "none" && divStyle === "none") ? "block" : "none";
                console.log(canBeEntered);
            }
        }

        function updateText() {
            document.getElementById("locationText").innerText = stringList[currentIndex];
            if (currentIndex === stringList.length - 1) {
                changeButtonVisibility();
            }
        }

        function changeButtonVisibility() {
            document.getElementById("btnNext").style.display = "none";
            btnNextStyle = "none";
            @if (Model.Location.Monster != null) {
                Model.Location.IsFight = true;
                <text>
                    document.getElementById("buttons").style.display = "flex";
                </text>
            }
            @foreach (var c in Model.Connections)
            {
                <text>
                        checkConnection('@c.Target', '@c.CanBeUsed.ToString().ToLower()');
                </text>
            }
        }

        document.getElementById("btnNext").addEventListener("click", function () {
            currentIndex = currentIndex + 1;
            updateText();
        });

        updateText();

        function toggleInv() {
            const inv = document.querySelector(".inventory__main");
            inv.style.display = inv.style.display === 'flex' ? 'none' : 'flex';
        }

    </script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script>
        jQuery(document).ready(function () {
            $("#kill").on("click", function () {
                let dmg = 0;
                @if (Model.Location.Monster != null)
                {
                    <text>
                                dmg = @Model.Location.Monster.Damage;
                    </text>
                };
                let hitMonsterDmg = @Model.GS.EquippedWeapon.Damage;
                console.log(dmg);

                $.ajax({
                    type: "POST",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN",
                            $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    data: {
                        dmg: hitMonsterDmg,
                        id: @Model.GS.Location
                    },
                    url: "Location?handler=HitMonster",
                    success: function (data) {
                        $("#monsterHP").text(data);
                        if (data < 1) {
                            document.getElementById("div").style.display = "none";
                            @Model.Location.IsFight = true;
                        }
                        @foreach (var c in Model.Connections)
                        {
                            <text>
                                checkConnection('@c.Target', '@c.CanBeUsed.ToString().ToLower()');
                            </text>
                        }

                        showHitIndicator();

                        setTimeout(function () {
                            if (data > 0) {
                                let rand = Math.random();
                                let chance = @Model.GS.EquippedShield.BlockChance;

                                if (rand < chance / 100) {
                                    setTimeout(function () {
                                        $.ajax({
                                            type: "POST",
                                            beforeSend: function (xhr) {
                                                xhr.setRequestHeader("XSRF-TOKEN",
                                                    $('input:hidden[name="__RequestVerificationToken"]').val());
                                            },
                                            data: { dmg: dmg },
                                            url: "Location?handler=UpdateHp",
                                            success: function (data) {
                                                if (data < 1) {
                                                    location.reload();
                                                }
                                                $("#hp").text("HP: " + data);
                                            },
                                            error: function (error) {
                                                console.error("Error updating HP:", error);
                                            }
                                        });
                                    }, 1000);
                                }
                                else {
                                    showBlockIndicator();
                                }
                            }
                        }, 500);
                    },
                    error: function (error) {
                        console.error("Error updating HP:", error);
                    }
                });
            });

            function showHitIndicator() {
                const hit = document.getElementById("hit-indicator");

                hit.style.display = "block";

                setTimeout(function () {
                    hit.style.display = "none";
                }, 500);
            }

            function showCritIndicator() {
                const crit = document.getElementById("crit-indicator");

                crit.style.display = "block";

                setTimeout(function () {
                    crit.style.display = "none";
                }, 500);
            }

            function showFailIndicator() {
                const fail = document.getElementById("fail-indicator");

                fail.style.display = "block";

                setTimeout(function () {
                    fail.style.display = "none";
                }, 500);
            }

            function showBlockIndicator() {
                const block = document.getElementById("block-indicator");

                block.style.display = "block";

                setTimeout(function () {
                    block.style.display = "none";
                }, 500);
            }

            function HideItem() {
                let item = document.getElementById("item")
                item.style.display = "none";
                document.getElementById("div").style.display = "none";
            }
            $("#item").on("click", function () {
                $.ajax({
                    type: "POST",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN",
                            $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    url: "Location?handler=AddItem",
                    success: function (data) {
                        HideItem();
                        @foreach (var c in Model.Connections)
                        {
                            <text>
                                                    checkConnection('@c.Target', '@c.CanBeUsed.ToString().ToLower()');
                            </text>
                        }
                        if (document.getElementById("inv-slot-1").childNodes.length === 0) {
                            let img = document.createElement("img")
                            img.src = data;
                            document.getElementById("inv-slot-1").appendChild(img);
                        }
                        else if (document.getElementById("inv-slot-2").childNodes.length === 0) {
                            console.log("test");
                            let img = document.createElement("img")
                            img.src = data;
                            document.getElementById("inv-slot-2").appendChild(img);
                        }
                        else if (document.getElementById("inv-slot-3").childNodes.length === 0) {
                            console.log("test");
                            let img = document.createElement("img")
                            img.src = data;
                            document.getElementById("inv-slot-3").appendChild(img);
                        }
                        else if (document.getElementById("inv-slot-4").childNodes.length === 0) {
                            console.log("test");
                            let img = document.createElement("img")
                            img.src = data;
                            document.getElementById("inv-slot-4").appendChild(img);
                        }
                    },
                    error: function (error) {
                        console.error("Error updating HP:", error);
                    }
                });
            });

            $("#critical").on("click", function () {
                let dmg = 0;
                @if (Model.Location.Monster != null)
                {
                    <text>
                                dmg = @Model.Location.Monster.Damage;
                    </text>
                };
                let hitMonsterDmg = @Model.GS.EquippedWeapon.Damage;
                hitMonsterDmg = hitMonsterDmg * 2;

                let rand = Math.random();
                let chance = @Model.GS.EquippedWeapon.CriticalChance;

                if (rand < chance / 100) {
                    $.ajax({
                        type: "POST",
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader("XSRF-TOKEN",
                                $('input:hidden[name="__RequestVerificationToken"]').val());
                        },
                        data: {
                            dmg: hitMonsterDmg,
                            id: @Model.GS.Location
                                    },
                        url: "Location?handler=HitMonster",
                        success: function (data) {
                            $("#monsterHP").text(data);
                            if (data < 1) {
                                document.getElementById("div").style.display = "none";
                            @Model.Location.IsFight = true;
                                                }
                            @foreach (var c in Model.Connections)
                            {
                                <text>
                                                        checkConnection('@c.Target', '@c.CanBeUsed.ToString().ToLower()');
                                </text>
                            }

                            showCritIndicator();

                            setTimeout(function () {
                                if (data > 0) {
                                    let rand = Math.random();
                                    let chance = @Model.GS.EquippedShield.BlockChance;

                                    if (rand < chance / 100) {
                                        setTimeout(function () {
                                            $.ajax({
                                                type: "POST",
                                                beforeSend: function (xhr) {
                                                    xhr.setRequestHeader("XSRF-TOKEN",
                                                        $('input:hidden[name="__RequestVerificationToken"]').val());
                                                },
                                                data: { dmg: dmg },
                                                url: "Location?handler=UpdateHp",
                                                success: function (data) {
                                                    if (data < 1) {
                                                        location.reload();
                                                    }
                                                    $("#hp").text("HP: " + data);
                                                },
                                                error: function (error) {
                                                    console.error("Error updating HP:", error);
                                                }
                                            });
                                        }, 1000);
                                    }
                                    else {
                                        showBlockIndicator();
                                    }
                                }
                            }, 500);
                        },
                        error: function (error) {
                            console.error("Error updating HP:", error);
                        }
                    });
                }
                else {
                    showFailIndicator();

                    setTimeout(function () {
                        setTimeout(function () {
                            $.ajax({
                                type: "POST",
                                beforeSend: function (xhr) {
                                    xhr.setRequestHeader("XSRF-TOKEN",
                                        $('input:hidden[name="__RequestVerificationToken"]').val());
                                },
                                data: { dmg: dmg },
                                url: "Location?handler=UpdateHp",
                                success: function (data) {
                                    if (data < 1) {
                                        location.reload();
                                    }
                                    $("#hp").text("HP: " + data);
                                },
                                error: function (error) {
                                    console.error("Error updating HP:", error);
                                }
                            });
                        }, 1000);
                    }, 500);
                }
            });
        });
    </script>
    <ul class="connections">
        @foreach (var c in Model.Connections)

        {
            <li>
                @if (String.IsNullOrEmpty(c.TargetSpecialPage))
                {
                    <a id="connection_@c.Target" asp-page="Location" asp-route-id="@c.Target"><div style="position: absolute; top: @c.Top; left: @c.Left; width: @c.Width; height: @c.Height"></div></a>
                }
                else
                {
                    Console.WriteLine(c.TargetSpecialPage);
                    <a id="connection_@c.Target" asp-page="@c.TargetSpecialPage"><div style="position: absolute; top: @c.Top; left: @c.Left; width: @c.Width; height: @c.Height"></div></a>
                }
            </li>

            <script>
                checkConnection('@c.Target', '@c.CanBeUsed.ToString().ToLower()');
            </script>
        }
    </ul>
</div>