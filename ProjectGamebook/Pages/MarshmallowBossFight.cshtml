@page
@model ProjectGamebook.Pages.MarshmallowBossFightModel
@Html.AntiForgeryToken()
@{
}
<div class="location">
    <div class="location__main" style="background-image: url(/imgs/bgs/boss34.jpg);">
        <div class="content content--boss" id="div">
            @Html.Raw(Model.GS.Boss.ReturnMonster())
            <div class="fight-indicators-container">
                <p id="hit-indicator" class="hit-indicator">Hit</p>
                <p id="block-indicator" class="block-indicator">You blocked</p>
                <p id="fail-indicator" class="fail-indicator">Fail</p>
                <p id="crit-indicator" class="crit-indicator">Critical hit</p>
            </div>
        </div>
        <script>
            let btnNextStyle;
            let currentIndex = 0;
            var stringList = @Html.Raw(@Model.jsonString);
        </script>
    </div>
    <div class="inventory">
        <div class="inventory-icon">
        </div>
    </div>

    <div class="stats">
        <div class="stats__item">
            <p id="hp">HP: @Model.GS.HP</p>
            <progress id="hp-prog" max="100" value="@Model.GS.HP"></progress>
        </div>
        <div class="stats__item">
            <p id="dl">DL: @Model.GS.DL</p>
            <progress id="dl-prog" max="100" value="@Model.GS.DL"></progress>
        </div>
    </div>
    <div class="equipped-items">
        <div class="equipped-items__item">
            <p>Shield</p>
            <img class="equipped" id="shield" src="@Model.GS.EquippedShield.ImageUrl" />
        </div>
        <div class="equipped-items__item">
            <p>Weapon</p>
            <img class="equipped" id="weapon" src="@Model.GS.EquippedWeapon.ImageUrl" />
        </div>

    </div>
    <img class="equipped-desktop equipped-desktop--shield" id="shield-desktop" src="@Model.GS.EquippedShield.EquippedImageUrl" />
    <img class="equipped-desktop equipped-desktop--weapon" id="weapon-desktop" src="@Model.GS.EquippedWeapon.EquippedImageUrl" />
    <div class="textbox">
        <p class="textbox__main-text" id="locationText"></p>
        <button class="btn btn--next" id="btnNext">Next</button>
        <div id="buttons" class="button-container">
            <button class="btn btn--kill" id="kill">Hit</button>
        </div>
    </div>

    <script>

        function updateText() {
            document.getElementById("locationText").innerText = stringList[currentIndex];
            if (currentIndex === stringList.length - 1) {
                changeButtonVisibility();
            }
        }

        function changeButtonVisibility() {
            document.getElementById("btnNext").style.display = "none";
            document.getElementById("buttons").style.display = "flex";
        }

        document.getElementById("btnNext").addEventListener("click", function () {
            currentIndex = currentIndex + 1;
            updateText();
        });

        updateText();

        function toggleInv() {
            const inv = document.querySelector(".inventory__main");
            inv.style.display = inv.style.display === 'flex' ? 'none' : 'flex';
        }

    </script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script>
        jQuery(document).ready(function () {
            let dmg = @Model.GS.Boss.Damage;
            let dlIncrease = @Model.GS.Boss.DLIncrease;
            let hitMonsterDmg = @Model.GS.EquippedWeapon.Damage;
            let critChance = @Model.GS.EquippedWeapon.CriticalChance;
            let blockChance = @Model.GS.EquippedShield.BlockChance;
            console.log(hitMonsterDmg);
            $("#kill").on("click", function () {

                $.ajax({
                    type: "POST",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN",
                            $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    data: {
                        dmg: hitMonsterDmg
                    },
                    url: "MarshmallowBossFight?handler=HitMonster",
                    success: function (data) {
                        $("#monsterHP").text("HP: " + data);
                        if (data < 1) {
                            location.reload();
                        }


                        showHitIndicator();

                        setTimeout(function () {
                            if (data > 0) {
                                let rand = Math.random();

                                if (rand < blockChance / 100) {
                                    setTimeout(function () {
                                        $.ajax({
                                            type: "POST",
                                            beforeSend: function (xhr) {
                                                xhr.setRequestHeader("XSRF-TOKEN",
                                                    $('input:hidden[name="__RequestVerificationToken"]').val());
                                            },
                                            data: {
                                                dmg: dmg,
                                                dlIncrease: dlIncrease
                                            },
                                            url: "MarshmallowBossFight?handler=UpdateHp",
                                            success: function (data) {
                                                if (data[0] < 1 || data[1] > 99) {
                                                    location.reload();
                                                }
                                                $("#hp").text("HP: " + data[0]);
                                                document.getElementById("hp-prog").value = data[0];
                                                $("#dl").text("DL: " + data[1]);
                                                document.getElementById("dl-prog").value = data[1];
                                            },
                                            error: function (error) {
                                                console.error("Error updating HP:", error);
                                            }
                                        });
                                    }, 1000);
                                }
                                else {
                                    showBlockIndicator();
                                }
                            }
                        }, 500);
                    },
                    error: function (error) {
                        console.error("Error updating HP:", error);
                    }
                });
            });

            function showHitIndicator() {
                const hit = document.getElementById("hit-indicator");

                hit.style.display = "block";

                setTimeout(function () {
                    hit.style.display = "none";
                }, 500);
            }

            function showCritIndicator() {
                const crit = document.getElementById("crit-indicator");

                crit.style.display = "block";

                setTimeout(function () {
                    crit.style.display = "none";
                }, 500);
            }

            function showFailIndicator() {
                const fail = document.getElementById("fail-indicator");

                fail.style.display = "block";

                setTimeout(function () {
                    fail.style.display = "none";
                }, 500);
            }

            function showBlockIndicator() {
                const block = document.getElementById("block-indicator");

                block.style.display = "block";

                setTimeout(function () {
                    block.style.display = "none";
                }, 500);
            }

        });
    </script>
</div>